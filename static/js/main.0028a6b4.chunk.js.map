{"version":3,"sources":["Board/Board2.js","App.js","reportWebVitals.js","index.js"],"names":["Board2","props","state","snake","snakeHead","board","boardRowSize","boardColSize","snakeDirection","food","poisonFood","score","speed","border","Set","document","addEventListener","e","console","log","key","handleSnakeDirection","Promise","s","r","makeBoard","then","makeBorder","makeFood","makeSnake","setTimeout","snakeMove","counter","row","this","currentRow","col","push","setState","forEach","add","length","maxValue","i","nextFood","minValue","Math","floor","random","includes","has","startValue","head","nextHead","D","isPoison","shift","reverseSnake","CD","currentSnakeDirection","body","reverse","map","rowIdx","className","cell","cellIdx","Component","App","isRenderBoard","reloadGame","type","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0028a6b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Board.css\";\r\n\r\nexport default class Board2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snake: [],\r\n      snakeHead: 0,\r\n      board: [],\r\n      boardRowSize: 30,\r\n      boardColSize: 40,\r\n      snakeDirection: \"R\",\r\n      food: 0,\r\n      poisonFood: 0,\r\n      score: 0,\r\n      speed: 200,\r\n      border: new Set(),\r\n    };\r\n    document.addEventListener(\"keydown\", (e) => {\r\n      console.log(e.key);\r\n      this.handleSnakeDirection(e.key);\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    const makeBoardPromise = new Promise((s, r) => {\r\n      this.makeBoard();\r\n      s();\r\n    });\r\n    // make sure makeBoard is finish, then makeBorder/Food /start snake move\r\n    makeBoardPromise.then(() => {\r\n      this.makeBorder();\r\n      this.makeFood();\r\n      this.makeSnake();\r\n      setTimeout(() => this.snakeMove(), this.state.speed);\r\n    });\r\n  }\r\n\r\n  makeBoard() {\r\n    var board = [];\r\n    let counter = 1;\r\n    for (let row = 0; row < this.state.boardRowSize; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < this.state.boardColSize; col++) {\r\n        currentRow.push(counter++);\r\n      }\r\n      board.push(currentRow);\r\n    }\r\n    console.log(board);\r\n    this.setState({\r\n      ...this.state,\r\n      board: board,\r\n    });\r\n  }\r\n\r\n  makeBorder() {\r\n    var border = new Set();\r\n    var board = this.state.board;\r\n    board[0].forEach((e) => border.add(e)); // first row of board\r\n    board[board.length - 1].forEach((e) => border.add(e)); // last row of board\r\n    let maxValue = (this.state.boardRowSize - 1) * this.state.boardColSize;\r\n    let minValue = this.state.boardColSize + 1;\r\n    // first col and last col of board\r\n    for (let i = minValue; i < maxValue + 1; i++) {\r\n      if (i % this.state.boardColSize <= 1) {\r\n        border.add(i);\r\n      }\r\n    }\r\n    console.log(border);\r\n    this.setState({\r\n      ...this.state,\r\n      border: border,\r\n    });\r\n  }\r\n\r\n  makeFood() {\r\n    var nextFood = 0;\r\n    let maxValue = (this.state.boardRowSize - 1) * this.state.boardColSize;\r\n    let minValue = this.state.boardColSize + 1;\r\n    while (true) {\r\n      nextFood = Math.floor(\r\n        Math.random() * (maxValue - minValue + 1) + minValue\r\n      );\r\n      if (\r\n        this.state.snake.includes(nextFood) ||\r\n        this.state.food === nextFood ||\r\n        this.state.border.has(nextFood)\r\n      ) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n    // chance of make poison food\r\n    var poisonFood = 0;\r\n    if (Math.random() < 0.3) {\r\n      poisonFood = nextFood;\r\n    }\r\n    this.setState({\r\n      ...this.state,\r\n      food: nextFood,\r\n      poisonFood: poisonFood,\r\n    });\r\n    console.log(this.state.food);\r\n    console.log(this.state.poisonFood);\r\n  }\r\n\r\n  makeSnake() {\r\n    var snake = [];\r\n    var startRow = Math.floor(this.state.boardRowSize / 4) + 1;\r\n    var startValue = startRow * this.state.boardColSize + 2;\r\n    snake.push(startValue);\r\n    snake.push(startValue + 1);\r\n    snake.push(startValue + 2);\r\n    var head = snake[snake.length - 1];\r\n    this.setState({\r\n      ...this.state,\r\n      snake: snake,\r\n      snakeHead: head,\r\n    });\r\n  }\r\n\r\n  snakeMove() {\r\n    var snake = this.state.snake;\r\n    var head = snake[snake.length - 1];\r\n    var D = this.state.snakeDirection;\r\n    var nextHead;\r\n    if (D === \"R\") {\r\n      nextHead = head + 1;\r\n    }\r\n    if (D === \"L\") {\r\n      nextHead = head - 1;\r\n    }\r\n    if (D === \"U\") {\r\n      nextHead = head - this.state.boardColSize;\r\n    }\r\n    if (D === \"D\") {\r\n      nextHead = head + this.state.boardColSize;\r\n    }\r\n\r\n    var score = this.state.score;\r\n    var speed = this.state.speed;\r\n    var isPoison = false;\r\n    if (this.state.food === nextHead) {\r\n      if (this.state.poisonFood === nextHead) {\r\n        isPoison = true;\r\n        score += 2;\r\n      }\r\n      this.makeFood();\r\n      score++;\r\n      if (speed > 40) {\r\n        speed = Math.floor((speed * 90) / 100);\r\n      }\r\n    } else {\r\n      snake.shift();\r\n    }\r\n    // handle dead\r\n    if (\r\n      this.state.border.has(nextHead) ||\r\n      this.state.snake.includes(nextHead)\r\n    ) {\r\n      console.log(\"dead\");\r\n    } else {\r\n      setTimeout(() => this.snakeMove(), speed);\r\n    }\r\n    snake.push(nextHead);\r\n    this.setState({\r\n      ...this.state,\r\n      snake: snake,\r\n      snakeHead: nextHead,\r\n      score: score,\r\n      speed: speed,\r\n    });\r\n    if (isPoison) {\r\n      this.reverseSnake();\r\n    }\r\n  }\r\n\r\n  handleSnakeDirection(key) {\r\n    var D = this.state.snakeDirection;\r\n    var CD = this.currentSnakeDirection();\r\n    if (key === \"ArrowRight\" && CD !== \"L\") {\r\n      D = \"R\";\r\n    }\r\n    if (key === \"ArrowLeft\" && CD !== \"R\") {\r\n      D = \"L\";\r\n    }\r\n    if (key === \"ArrowUp\" && CD !== \"D\") {\r\n      D = \"U\";\r\n    }\r\n    if (key === \"ArrowDown\" && CD !== \"U\") {\r\n      D = \"D\";\r\n    }\r\n    this.setState({\r\n      ...this.state,\r\n      snakeDirection: D,\r\n    });\r\n  }\r\n\r\n  currentSnakeDirection() {\r\n    var D = \"\";\r\n    var snake = this.state.snake;\r\n    var head = snake[snake.length - 1];\r\n    var body = snake[snake.length - 2];\r\n    if (head - body === 1) {\r\n      D = \"R\";\r\n    }\r\n    if (head - body === -1) {\r\n      D = \"L\";\r\n    }\r\n    if (head - body === this.state.boardColSize) {\r\n      D = \"D\";\r\n    }\r\n    if (head - body === -this.state.boardColSize) {\r\n      D = \"U\";\r\n    }\r\n    return D;\r\n  }\r\n\r\n  reverseSnake() {\r\n    var snake = this.state.snake.reverse();\r\n    var D = this.currentSnakeDirection();\r\n    this.setState({\r\n      ...this.state,\r\n      snake: snake,\r\n      snakeDirection: D,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var board = this.state.board;\r\n    return (\r\n      <div>\r\n        <h2>SCORE : {this.state.score}</h2>\r\n        {board.map((row, rowIdx) => (\r\n          <div key={rowIdx} className=\"row\">\r\n            {row.map((cell, cellIdx) => (\r\n              <div\r\n                key={cellIdx}\r\n                className={`cell ${\r\n                  this.state.snake.includes(cell) ? \"snake-cell\" : \"\"\r\n                } ${this.state.border.has(cell) ? \"border-cell\" : \"\"} ${\r\n                  this.state.food === cell ? \"food-cell\" : \"\"\r\n                } ${this.state.snakeHead === cell ? \"snakeHead-cell\" : \"\"}\r\n                ${this.state.poisonFood === cell ? \"poisonFood-cell\" : \"\"}`}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport Board from \"./Board/Board2\";\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isRenderBoard: true,\n    };\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"r\") {\n        this.reloadGame();\n      }\n    });\n  }\n  reloadGame() {\n    const reloadPromise = new Promise((s, r) => {\n      this.setState({\n        isRenderBoard: !this.state.isRenderBoard,\n      });\n      s();\n    });\n    reloadPromise.then(() => {\n      this.setState({\n        isRenderBoard: !this.state.isRenderBoard,\n      });\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isRenderBoard ? <Board></Board> : \"\"}\n        <button type=\"button\" className=\"btn\" onClick={() => this.reloadGame()}>\n          Press \"R\" to Restart\n        </button>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}